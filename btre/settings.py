"""
Django settings for btre project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from django.contrib.messages import constants as messages
from pathlib import Path
import os
env = os.environ

IS_PRODUCTION_SERVER = True

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-&7@p@)d#pd$6^e$j5k$kk1u0-(00^ihr7mz4&11^!aqmg$l(+3"


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# Application definition

ALLOWED_HOSTS = ['18.223.248.217', '127.0.0.1']

INSTALLED_APPS = [
    'pages.apps.PagesConfig',
    'listings.apps.ListingsConfig',
    'realtors.apps.RealtorsConfig',
    'accounts.apps.AccountsConfig',
    'contacts.apps.ContactsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'storages'
]

MIDDLEWARE = [
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'btre.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [Path.joinpath(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'btre.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

if IS_PRODUCTION_SERVER:

    # Google Cloud authentication
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = os.path.join(
    BASE_DIR, "credentials.json")

    # # Database
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.postgresql',
    #         'NAME': "postgres",
    #         'USER': "khodakhunti",
    #         'PASSWORD': "Kh0d@khunti",
    #         'HOST': env.get('DB_HOST')
    #     }
    # }
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'btredb',
            'USER': 'karan',
            'PASSWORD': 'karan',
            'HOST': 'localhost'
        }
    }
    STORAGE_DEST = 'gcloud'

    if STORAGE_DEST == 'gcloud':
        # static and meadia file storage for Production server
        DEFAULT_FILE_STORAGE = 'btre.gcloud.GoogleCloudMediaFileStorage'
        STATICFILES_STORAGE = 'btre.gcloud.GoogleCloudStaticFileStorage'

        # Cloud buckets
        GS_PROJECT_ID = env.get('GS_PROJECT_ID')
        GS_STATIC_BUCKET_NAME = env.get('GS_STATIC_BUCKET_NAME')
        GS_MEDIA_BUCKET_NAME = env.get('GS_STATIC_BUCKET_NAME')


        # Static files (CSS, JavaScript, Imagess
        STATIC_ROOT = 'static/'
        STATIC_URL = 'https://storage.googleapis.com/{}/static/'.format(GS_STATIC_BUCKET_NAME)
        STATICFILES_DIRS = [
            Path.joinpath(BASE_DIR, 'btre/static')
        ]

        # Media Folder Settings
        MEDIA_ROOT = 'media/'
        MEDIA_URL = 'https://storage.googleapis.com/{}/media/'.format(GS_MEDIA_BUCKET_NAME)

    if STORAGE_DEST == 'aws':
        AWS_ACCESS_KEY_ID = env.get('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = env.get('AWS_SECRET_ACCESS_KEY')
        AWS_STORAGE_BUCKET_NAME = env.get('AWS_STORAGE_BUCKET_NAME')

        AWS_S3_FILE_OVERWRITE = False
        AWS_DEFAULT_ACL = None
        DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
        STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'

        STATIC_URL = '/static/'
        STATICFILES_DIRS = [
            Path.joinpath(BASE_DIR, 'btre/static')
        ]
        STATIC_ROOT = Path.joinpath(BASE_DIR, 'assets/static')

        # Media Folder Settings
        MEDIA_URL = '/media/'
        MEDIA_ROOT = Path.joinpath(BASE_DIR, 'assets/media')

    
else:
    # Database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'btredb',
            'USER': 'karan',
            'PASSWORD': 'karan',
            'HOST': 'localhost'
        }
    }

    # Static files (CSS, JavaScript, Imagess
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [
        Path.joinpath(BASE_DIR, 'btre/static')
    ]
    STATIC_ROOT = Path.joinpath(BASE_DIR, 'assets/static')

    # Media Folder Settings
    MEDIA_URL = '/media/'
    MEDIA_ROOT = Path.joinpath(BASE_DIR, 'assets/media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Messages
MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}


# Email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = env.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env.get('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = True
